# - *- coding: utf- 8 - *-
import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from pycrystalpay import CrystalPay
from yoomoney import Client

from tgbot.keyboards.inline_admin import payment_choice_finl
from tgbot.loader import dp
from tgbot.services.api_crystal import CrystalAPI
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite import update_paymentx, get_paymentx, update_crystal, get_crystal, update_yoo
from tgbot.services.api_YooMoney import YooMoneyAPI
from tgbot.utils.misc.bot_filters import IsAdmin


###################################################################################
############################# –í–´–ë–û–† –°–ü–û–°–û–ë–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ############################
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üñ≤ –°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def payment_systems(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=payment_choice_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="change_payment:")
async def payment_systems_edit(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    way_status = call.data.split(":")[2]

    if way_pay == 'Crystal':
        crystal_info = get_crystal()
        try:
            crystal = CrystalPay(crystal_info['login'], crystal_info['secret'])
            if way_status == 'False':
                update_crystal(status=0)
            else:
                update_crystal(status=1)
        except:
            await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ Crystal –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.", True)
    elif way_pay == 'YooMoney':
        try:
            if way_status == 'False':
                update_yoo(status=0)
            else:
                update_yoo(status=1)
        except:
            await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ YooMoney –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.", True)
    else:

        get_payment = get_paymentx()

        if get_payment['qiwi_login'] != "None" and get_payment['qiwi_token'] != "None" or way_status == "False":
            if way_pay == "Form":
                if get_payment['qiwi_secret'] != "None" or way_status == "False":
                    update_paymentx(way_form=way_status)
                else:
                    await call.answer(
                        "‚ùó –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–∏–≤–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ",
                        True)
            # elif way_pay == "Number":
            #     update_paymentx(way_number=way_status)
            # elif way_pay == "Nickname":
            #     status, response = await (await QiwiAPI(call)).get_nickname()
            #     if status:
            #         update_paymentx(way_nickname=way_status, qiwi_nickname=response)
            #     else:
            #         await call.answer(response, True)
        else:
            await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ –∫–∏–≤–∏ –∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.", True)

    try:
        await call.message.edit_text("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=payment_choice_finl())
    except:
        pass


###################################################################################
####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="ü•ù –ò–∑–º–µ–Ω–∏—Ç—å QIWI", state="*")
async def payment_qiwi_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_qiwi_login")
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsAdmin(), text="ü•ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI", state="*")
async def payment_qiwi_check(message: Message, state: FSMContext):
    await state.finish()

    await (await QiwiAPI(message, check_pass=True)).pre_checker()


# –ë–∞–ª–∞–Ω—Å QIWI
@dp.message_handler(IsAdmin(), text="ü•ù –ë–∞–ª–∞–Ω—Å QIWI", state="*")
async def payment_qiwi_balance(message: Message, state: FSMContext):
    await state.finish()

    await (await QiwiAPI(message)).get_balance()


######################################## –ü–†–ò–ù–Ø–¢–ò–ï QIWI ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_login")
async def payment_qiwi_edit_login(message: Message, state: FSMContext):
    if message.text.startswith("+"):
        await state.update_data(here_qiwi_login=message.text)

        await state.set_state("here_qiwi_token")
        await message.answer(
            "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>—Ç–æ–∫–µ–Ω API</code> QIWI –∫–æ—à–µ–ª—å–∫–∞</b>\n"
            "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
            "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
            disable_web_page_preview=True
        )
    else:
        await message.answer("<b>‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + <code>(+7..., +380...)</code></b>\n"
                             "ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_token")
async def payment_qiwi_edit_token(message: Message, state: FSMContext):
    await state.update_data(here_qiwi_token=message.text)

    await state.set_state("here_qiwi_secret")
    await message.answer(
        "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á</code></b>\n"
        "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤: <code>0</code>",
        disable_web_page_preview=True
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_secret")
async def payment_qiwi_edit_secret(message: Message, state: FSMContext):
    async with state.proxy() as data:
        qiwi_login = data['here_qiwi_login']
        qiwi_token = data['here_qiwi_token']
        if message.text == "0": qiwi_secret = "None"
        if message.text != "0": qiwi_secret = message.text

    await state.finish()

    cache_message = await message.answer("<b>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö...</b>")
    await asyncio.sleep(0.5)

    await (await QiwiAPI(cache_message, qiwi_login, qiwi_token, qiwi_secret, True)).pre_checker()


###################################################################################
####################################### CRYSTAL ###################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ CRYSTAL –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="üíé –ò–∑–º–µ–Ω–∏—Ç—å Crystal", state="*")
async def payment_crystal_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_crystal_login")
    await message.answer("<b>üíé –í–≤–µ–¥–∏—Ç–µ <code>–ª–æ–≥–∏–Ω</code> Crystal</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ CRYSTAL
@dp.message_handler(IsAdmin(), text="üíé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Crystal", state="*")
async def payment_crystal_check(message: Message, state: FSMContext):
    await state.finish()

    await (await CrystalAPI(message, check_pass=True)).pre_checker()


# –ë–∞–ª–∞–Ω—Å CRYSTAL
@dp.message_handler(IsAdmin(), text="üíé –ë–∞–ª–∞–Ω—Å Crystal", state="*")
async def payment_crystal_balance(message: Message, state: FSMContext):
    await state.finish()

    await (await CrystalAPI(message)).get_balance()


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_crystal_login")
async def payment_crystal_edit_login(message: Message, state: FSMContext):
    await state.update_data(here_crystal_login=message.text)

    await state.set_state("here_crystal_secret")
    await message.answer(
        "<b>üíé –í–≤–µ–¥–∏—Ç–µ <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á</code></b>\n"
    )


@dp.message_handler(IsAdmin(), state="here_crystal_secret")
async def payment_crystal_edit_secret(message: Message, state: FSMContext):
    async with state.proxy() as data:
        crystal_login = data['here_crystal_login']
        if message.text == "0": crystal_secret = "None"
        if message.text != "0": crystal_secret = message.text

    await state.finish()

    cache_message = await message.answer("<b>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö Crystal –¥–∞–Ω–Ω—ã—Ö...</b>")
    await asyncio.sleep(0.5)

    await (await CrystalAPI(message, login=crystal_login, secret=crystal_secret, add_pass=True)).pre_checker()


###################################################################################
####################################### WebMoney ##################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ WebMoney –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="üåç –ò–∑–º–µ–Ω–∏—Ç—å Yoomoney", state="*")
async def payment_crystal_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_yoo_client_id")
    await message.answer("<b>üåç –í–≤–µ–¥–∏—Ç–µ <code>Client_id</code> YooMoney</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ WebMoney
@dp.message_handler(IsAdmin(), text="üåç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Yoomoney", state="*")
async def payment_crystal_check(message: Message, state: FSMContext):
    await state.finish()

    await (await YooMoneyAPI(message, check_pass=True)).pre_checker()


# –ë–∞–ª–∞–Ω—Å WebMoney
@dp.message_handler(IsAdmin(), text="üåç –ë–∞–ª–∞–Ω—Å Yoomoney", state="*")
async def payment_crystal_balance(message: Message, state: FSMContext):
    await state.finish()

    await (await YooMoneyAPI(message)).get_balance()


@dp.message_handler(IsAdmin(), state="here_yoo_client_id")
async def payment_wm_edit_wallet(message: Message, state: FSMContext):
    await state.update_data(here_yoo_client_id=message.text)

    await state.set_state("here_yoo_redirect")
    await message.answer(
        "<b>üåç –í–≤–µ–¥–∏—Ç–µ <code>Redirect_URI</code> YooMoney</b>"
    )




@dp.message_handler(IsAdmin(), state="here_yoo_redirect")
async def payment_wm_edit_key(message: Message, state: FSMContext):
    async with state.proxy() as data:
        client_id = data['here_yoo_client_id']
        redirect = message.text
        await state.update_data(here_yoo_redirect=message.text)



    cache_message = await message.answer("<b>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</b>")
    await asyncio.sleep(0.5)

    link = await (await YooMoneyAPI(cache_message, client_id=client_id, redirect=redirect)).get_link()
    if link != False:
        await state.set_state("here_yoo_getcode")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", url=link))
        await message.answer("<b>1) –ü–æ—Å–µ—Ç–∏—Ç–µ —ç—Ç–æ—Ç –≤–µ–±-—Å–∞–π—Ç</b> \n"
                             "<b>2) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n"
                             "<b>3) –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø–µ—Ä–µ–Ω–µ—Å–ª–∏</b>",
                             reply_markup=keyboard)
    else:
        await message.answer("<b>YooMoney –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>")


@dp.message_handler(IsAdmin(), state="here_yoo_getcode")
async def payment_yoomoney_get_code(message: Message, state: FSMContext):
    async with state.proxy() as data:
        client_id = data['here_yoo_client_id']
        redirect = data['here_yoo_redirect']
    link = message.text

    # await state.finish()

    cache_message = await message.answer("<b>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...</b>")
    await asyncio.sleep(0.5)

    token = await (await YooMoneyAPI(cache_message, client_id=client_id, redirect=redirect)).get_token(link)
    if token != False:
        client = Client(token)
        user = client.account_info()
        update_yoo(client_id=client_id, token=token, redirect_uri=redirect, wallet=user.account)
        await message.answer("<b>YooMoney –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>")
    else:
        await message.answer("<b>YooMoney –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>")


