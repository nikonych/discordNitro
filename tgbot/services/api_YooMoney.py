import random
import string

import requests
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from async_class import AsyncClass
from paymentcheckout import WebMoneyCheck
from os import path

from yoomoney import Client, Quickpay

from tgbot.loader import bot
from tgbot.services.api_sqlite import get_crystal, update_crystal,  get_yoo, update_yoo
from tgbot.services.authorize import Authorize
from tgbot.utils.misc_functions import send_admins


class YooMoneyAPI(AsyncClass):
    async def __ainit__(self, dp, wallet=None, client_id=None, token=None, redirect=None, check_pass=False,
                        add_pass=False):
        if client_id is not None:
            self.client_id = client_id
            self.redirect = redirect
        else:
            self.client_id = get_yoo()['client_id']
            self.redirect = get_yoo()['redirect_uri']
            self.token = get_yoo()['token']
            self.wallet = get_yoo()['wallet']

        self.dp = dp
        self.check_pass = check_pass
        self.add_pass = add_pass
        self.scope= ["account-info",
                               "operation-history",
                               "operation-details",
                               "incoming-transfers",
                               "payment-p2p",
                               "payment-shop",
                               ]

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –∫–∏–≤–∏
    @staticmethod
    async def error_wallet():
        await send_admins("<b>YooMoney –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
                          "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ")

    async def pre_checker(self):
        if self.check_pass:
            if self.token != "None":
                try:
                    client = Client(self.token)
                    user = client.account_info()
                    await self.dp.answer(f"<b>YooMoney –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç</b>\n"
                                         f"‚óæ Wallet: <code>{user.account}</code>\n"
                                         f"‚óæ –¢–æ–∫–µ–Ω: <code>{self.token}</code>\n"
                                         f"‚óæ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: <code>{self.client_id}</code>\n")
                except:
                    await self.error_wallet()
                    return False
            else:
                await self.error_wallet()
                return False
        elif self.add_pass:
            try:
                Authoriz = Authorize(
                        client_id=self.client_id,
                        redirect_uri=self.redirect,
                        scope=["account-info",
                               "operation-history",
                               "operation-details",
                               "incoming-transfers",
                               "payment-p2p",
                               "payment-shop",
                               ]
                    )
                token = Authoriz.getToken()
                if token != "GG":
                    update_yoo(wallet=self.wallet, type=self.type, balance=0, status=True)
                    await self.dp.answer("<b>YooMoney –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>")
                else:
                    await self.dp.answer("<b>YooMoney –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>")
                    return False
            except:
                await self.dp.answer("<b>YooMoney –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>")
                return False
        return True

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_pay(self, get_amount):
        letters = string.ascii_lowercase
        p = (''.join(random.choice(letters) for i in range(10)))
        print(p)
        quickpay = Quickpay(
            receiver=str(self.wallet),
            quickpay_form="shop",
            targets=self.dp.from_user.username,
            paymentType="SB",
            sum=get_amount,
            label=str(self.dp.from_user.id) + str(get_amount) + str(p)
        )

        return_message = f"üî• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n" \
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                         f"üí∏ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ </code>\n" \
                         f"üí† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>\n" \
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                         f"üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {get_amount} RUB\n" \
                         f"‚åõÔ∏è –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É."
        return quickpay, return_message


    async def get_link(self):
        self.url = "https://yoomoney.ru/oauth/authorize?client_id={client_id}&response_type=code" \
                   "&redirect_uri={redirect_uri}&scope={scope}".format(client_id=self.client_id,
                                                                       redirect_uri=self.redirect,
                                                                       scope='%20'.join(
                                                                           [str(elem) for elem in self.scope]),
                                                                       )

        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        response = requests.request("POST", self.url, headers=headers)

        if response.status_code == 200:
            return response.url
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", url=response.url))
            await self.dp.answer("<b>1) –ü–æ—Å–µ—Ç–∏—Ç–µ —ç—Ç–æ—Ç –≤–µ–±-—Å–∞–π—Ç</b> \n"
                                 "<b>2) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>\n"
                                 "<b>3) –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø–µ—Ä–µ–Ω–µ—Å–ª–∏</b>",
                                 reply_markup=keyboard)
        return False


    async def get_token(self, link):
        try:
            code = link[link.index("code=") + 5:].replace(" ","")

        except:
            pass

        url = "https://yoomoney.ru/oauth/token?code={code}&client_id={client_id}&" \
              "grant_type=authorization_code&redirect_uri={redirect_uri}".format(code=str(code),
                                                                                 client_id=self.client_id,
                                                                                 redirect_uri=self.redirect,
                                                                                 )
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }

        self.response = requests.request("POST", url, headers=headers)
        if "error" in self.response.json():
            return False
        if self.response.json()['access_token'] == "":
            return False


        return self.response.json()['access_token']





    async def get_balance(self):
        try:
            client = Client(self.token)
            user = client.account_info()
            await self.dp.answer(f"<b>üåç –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ <code>{user.account}</code> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b>\n"
                                 f"üá∑üá∫ –†—É–±–ª–µ–π: <code>{user.balance}‚ÇΩ</code>")
        except:
            await self.error_wallet()
            return False
