from aiogram.types import InputFile
from async_class import AsyncClass
from paymentcheckout import WebMoneyCheck
from os import path

from tgbot.loader import bot
from tgbot.services.api_sqlite import get_crystal, update_crystal, get_wm, update_wm
from tgbot.utils.misc_functions import send_admins


class wmAPI(AsyncClass):
    async def __ainit__(self, dp, wallet=None, crt=None, key=None,  check_pass=False,
                        add_pass=False):
        if wallet is not None:
            self.wallet = wallet
            self.crt = crt
            self.key = key
        else:
            self.wallet = get_wm()['wallet']
            self.crt = get_wm()['crt_path']
            self.key = get_wm()['key_path']

        self.dp = dp
        self.check_pass = check_pass
        self.add_pass = add_pass

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –æ –Ω–µ—Ä–∞–±–æ—á–µ–º –∫–∏–≤–∏
    @staticmethod
    async def error_wallet():
        await send_admins("<b>WebMoney –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n"
                          "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ")


    async def pre_checker(self):
        if self.check_pass:
            if self.wallet != "None" and path.exists(self.crt) and path.exists(self.key):
                try:
                    # w = WebMoneyCheck.WebMoney(self.wallet, self.crt, self.key)
                    await self.dp.answer(f"<b>WebMoney –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç</b>\n"
                                         f"‚óæ Wallet: <code>{self.wallet}</code>\n"
                                         f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ:")
                    print(self.crt)
                    await bot.send_document(chat_id=self.dp.chat.id, document=InputFile(self.crt))
                    await bot.send_document(chat_id=self.dp.chat.id, document=InputFile(self.key))
                except:
                    await self.error_wallet()
                    return False
            else:
                await self.error_wallet()
                return False
        elif self.add_pass:
            try:
                # w = WebMoneyCheck.WebMoney(self.wallet, self.crt, self.key)
                # update_wm(wallet=self.wallet, crt_path=self.crt, key_path=self.key, status=True)
                await self.dp.answer("<b>WebMoney –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>")
            except:
                await self.dp.answer("<b>WebMoney –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>")
                return False

        return True

    # async def get_balance(self):
    #     response = await self.pre_checker()
    #     if response:
    #         crystal = CrystalPay(self.login, self.secret)
    #         balance = crystal.get_cash_balance()
    #         save_balance = []
    #         balance = sorted(balance.items(), key=lambda x: float(x[1]), reverse=True)
    #         for k in balance:
    #             save_balance.append(k[0] + " : " + k[1])
    #         save_balance = "\n".join(save_balance)
    #         await self.dp.answer(f"<b>WebMoney –ë–∞–ª–∞–Ω—Å <code>{self.login}</code> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b>\n"
    #                              f"{save_balance}")


    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_pay(self, get_amount):
        response = await self.pre_checker()
        if response:
            comment = str(self.dp.from_user_id) + str(get_amount)
            return_message = f"<b>üÜô –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n" \
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                             f"üíé –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç \n <code>{self.wallet}</code> \n —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º  \n <code>{comment}</code>\n" \
                             f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_amount}‚ÇΩ</code>\n" \
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                             f"üîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>"
            return comment, return_message

